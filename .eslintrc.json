{
  "root": true,
  "ignorePatterns": ["**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "sort-imports": [
          "error",
          {
            "ignoreCase": true
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@typescript-eslint/recommended"],
      "rules": {
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "no-restricted-globals": ["error", "fdescribe", "xdescribe", "fit", "xit"],
        "no-restricted-syntax": ["error", "IfStatement > ExpressionStatement"],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": ["enumMember", "typeLike"],
            "format": ["PascalCase"],
            "custom": {
              "regex": "(My|my)(?=[A-Z]\\w*)",
              "match": false
            }
          },
          {
            "selector": ["parameter"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": ["variable", "function", "method", "classProperty", "typeProperty"],
            "format": ["camelCase"],
            "custom": {
              "regex": "(My|my)(?=[A-Z]\\w*)",
              "match": false
            }
          },
          {
            "selector": ["variable"],
            "format": ["UPPER_CASE", "camelCase"],
            "modifiers": ["global"],
            "custom": {
              "regex": "(My|my)(?=[A-Z]\\w*)",
              "match": false
            }
          },
          {
            "selector": ["variable"],
            "types": ["function"],
            "format": ["camelCase"]
          },
          {
            "selector": "interface",
            "custom": {
              "regex": "[Ii](?=[A-Z]\\w*)",
              "match": false
            },
            "format": ["PascalCase"]
          }
        ]
      }
    },
    {
      "files": ["*.http-spec.ts", "*.spec.ts", "*.unit.ts", "*.int.ts", "*.mock.ts"],
      "rules": {
        "no-underscore-dangle": 1,
        "@typescript-eslint/no-explicit-any": 1,
        "@typescript-eslint/no-empty-function": 1,
        "@typescript-eslint/unbound-method": 1,
        "@typescript-eslint/no-unsafe-return": 1,
        "@typescript-eslint/explicit-member-accessibility": 1
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["eslint:recommended"],
      "rules": {}
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    }
  ]
}
